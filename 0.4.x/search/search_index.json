{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 This is the documentation home for Rojo v0.4.x . Other versions of these docs: 0.5.x master branch Rojo is a flexible multi-tool designed for creating robust Roblox projects. This documentation is a work in progress, and is incomplete.","title":"Home"},{"location":"#home","text":"This is the documentation home for Rojo v0.4.x . Other versions of these docs: 0.5.x master branch Rojo is a flexible multi-tool designed for creating robust Roblox projects. This documentation is a work in progress, and is incomplete.","title":"Home"},{"location":"sync-details/","text":"Sync Details \u00b6 This page aims to describe how Rojo turns files on the filesystem into Roblox objects. Folders \u00b6 Any directory on the filesystem will turn into a Folder instance in Roblox, unless that folder matches the name of a service or other existing instance. In those cases, that instance will be preserved. Scripts \u00b6 Rojo can represent ModuleScript , Script , and LocalScript objects. The default script type is ModuleScript , since most scripts in well-structued Roblox projects will be modules. File Name Instance Type *.server.lua Script *.client.lua LocalScript *.lua ModuleScript If a directory contains a file named init.server.lua , init.client.lua , or init.lua , that folder will be transformed into a *Script instance with the conents of the init file. This can be used to create scripts inside of scripts. For example, this file tree: my-game init.client.lua foo.lua Will turn into these instances in Roblox: Models \u00b6 Rojo supports a JSON model format for representing simple models. It's designed for instance types like BindableEvent or Value objects, and is not suitable for larger models. Rojo JSON models are stored in .model.json files. Starting in Rojo version 0.4.10 , model files named init.model.json that are located in folders will replace that folder, much like Rojo's init.lua support. This can be useful to version instances like Tool that tend to contain several instances as well as one or more scripts. Info In the future, Rojo will support .rbxmx models. See issue #7 for more details and updates on this feature. Warning Prior to Rojo version 0.4.9 , the Properties and Children properties are required on all instances in JSON models! JSON model files are fairly strict; any syntax errors will cause the model to fail to sync! They look like this: hello.model.json { \"Name\" : \"hello\" , \"ClassName\" : \"Model\" , \"Children\" : [ { \"Name\" : \"Some Part\" , \"ClassName\" : \"Part\" }, { \"Name\" : \"Some StringValue\" , \"ClassName\" : \"StringValue\" , \"Properties\" : { \"Value\" : { \"Type\" : \"String\" , \"Value\" : \"Hello, world!\" } } } ] }","title":"Sync Details"},{"location":"sync-details/#sync-details","text":"This page aims to describe how Rojo turns files on the filesystem into Roblox objects.","title":"Sync Details"},{"location":"sync-details/#folders","text":"Any directory on the filesystem will turn into a Folder instance in Roblox, unless that folder matches the name of a service or other existing instance. In those cases, that instance will be preserved.","title":"Folders"},{"location":"sync-details/#scripts","text":"Rojo can represent ModuleScript , Script , and LocalScript objects. The default script type is ModuleScript , since most scripts in well-structued Roblox projects will be modules. File Name Instance Type *.server.lua Script *.client.lua LocalScript *.lua ModuleScript If a directory contains a file named init.server.lua , init.client.lua , or init.lua , that folder will be transformed into a *Script instance with the conents of the init file. This can be used to create scripts inside of scripts. For example, this file tree: my-game init.client.lua foo.lua Will turn into these instances in Roblox:","title":"Scripts"},{"location":"sync-details/#models","text":"Rojo supports a JSON model format for representing simple models. It's designed for instance types like BindableEvent or Value objects, and is not suitable for larger models. Rojo JSON models are stored in .model.json files. Starting in Rojo version 0.4.10 , model files named init.model.json that are located in folders will replace that folder, much like Rojo's init.lua support. This can be useful to version instances like Tool that tend to contain several instances as well as one or more scripts. Info In the future, Rojo will support .rbxmx models. See issue #7 for more details and updates on this feature. Warning Prior to Rojo version 0.4.9 , the Properties and Children properties are required on all instances in JSON models! JSON model files are fairly strict; any syntax errors will cause the model to fail to sync! They look like this: hello.model.json { \"Name\" : \"hello\" , \"ClassName\" : \"Model\" , \"Children\" : [ { \"Name\" : \"Some Part\" , \"ClassName\" : \"Part\" }, { \"Name\" : \"Some StringValue\" , \"ClassName\" : \"StringValue\" , \"Properties\" : { \"Value\" : { \"Type\" : \"String\" , \"Value\" : \"Hello, world!\" } } } ] }","title":"Models"},{"location":"why-rojo/","text":"Why Rojo? \u00b6 There are a number of existing plugins for Roblox that move code from the filesystem into Roblox. Besides Rojo, there is: Studio Bridge by Vocksel RbxRefresh by Osyris RbxSync by evaera CodeSync and rbx-exteditor by MemoryPenguin rbxmk by Anaminus So why did I build Rojo? Each of these tools solves what is essentially the same problem from a few different angles. The goal of Rojo is to take all of the lessons and ideas learned from these projects and build a tool that can solve the problem for good. Additionally: I think that this tool needs to be built in a compiled language without a runtime, for easy distribution and good performance. I think that the conventions promoted by other sync plugins ( .module.lua for modules, as well a single sync point) are sub-optimal. I think that I have a good enough understanding of the problem to build something robust. I think that Rojo should be able to do more than just sync code.","title":"Why Rojo?"},{"location":"why-rojo/#why-rojo","text":"There are a number of existing plugins for Roblox that move code from the filesystem into Roblox. Besides Rojo, there is: Studio Bridge by Vocksel RbxRefresh by Osyris RbxSync by evaera CodeSync and rbx-exteditor by MemoryPenguin rbxmk by Anaminus So why did I build Rojo? Each of these tools solves what is essentially the same problem from a few different angles. The goal of Rojo is to take all of the lessons and ideas learned from these projects and build a tool that can solve the problem for good. Additionally: I think that this tool needs to be built in a compiled language without a runtime, for easy distribution and good performance. I think that the conventions promoted by other sync plugins ( .module.lua for modules, as well a single sync point) are sub-optimal. I think that I have a good enough understanding of the problem to build something robust. I think that Rojo should be able to do more than just sync code.","title":"Why Rojo?"},{"location":"getting-started/creating-a-project/","text":"Creating a Project \u00b6 To use Rojo, you'll need to create a new project file, which tells Rojo what your project is, and how to load it into Roblox Studio. New Project \u00b6 Create a new folder, then run rojo init inside that folder to initialize an empty project. mkdir my-new-project cd my-new-project rojo init Rojo will create an empty project file named rojo.json in the directory. The default configuration doesn't do anything. We need to tell Rojo where our code is on the filesystem, and where we want to put it in the Roblox tree. To do that, open up rojo.json and add an entry to the partitions table: { \"name\" : \"your-project-name-here\" , \"servePort\" : 8000 , \"partitions\" : { \"src\" : { \"path\" : \"src\" , \"target\" : \"ReplicatedStorage.Project\" } } } Warning Make sure that the src directory exists in your project, or Rojo will throw an error! Warning Any objects contained in the target of a partition will be destroyed by Rojo if not found on the filesystem! A Rojo project has one or more partitions . Partitions define how code should be transferred between the filesystem and Roblox by mapping directories and files to Roblox objects. Each partition has: A name (the key in the partitions object), which is used for debugging path , the location on the filesystem relative to rojo.json target , the location in Roblox relative to game Syncing into Studio \u00b6 Once you've added your partition to the project file, you can start the Rojo dev server by running a command in your project's directory: rojo serve If your project is in the right place, Rojo will let you know that it was found and start an HTTP server that the plugin can connect to. In Roblox Studio, open the plugins tab and find Rojo's buttons. Press Test Connection to verify that the plugin can communicate with the dev server. Watch the Output panel for the results. Info If you see an error message, return to the previous steps and make sure that the Rojo dev server is running. After your connection was successful, press Sync In to move code from the filesystem into Studio, or use Toggle Polling to have Rojo automatically sync in changes as they happen. Importing an Existing Project \u00b6 Rojo will eventually support importing an existing Roblox project onto the filesystem for use with Rojo. Rojo doesn't currently support converting an existing project or syncing files from Roblox Studio onto the filesystem. In the mean time, you can manually copy your files into the structure that Rojo expects. Up-to-date information will be available on issue #5 as this is worked on.","title":"Creating a Project"},{"location":"getting-started/creating-a-project/#creating-a-project","text":"To use Rojo, you'll need to create a new project file, which tells Rojo what your project is, and how to load it into Roblox Studio.","title":"Creating a Project"},{"location":"getting-started/creating-a-project/#new-project","text":"Create a new folder, then run rojo init inside that folder to initialize an empty project. mkdir my-new-project cd my-new-project rojo init Rojo will create an empty project file named rojo.json in the directory. The default configuration doesn't do anything. We need to tell Rojo where our code is on the filesystem, and where we want to put it in the Roblox tree. To do that, open up rojo.json and add an entry to the partitions table: { \"name\" : \"your-project-name-here\" , \"servePort\" : 8000 , \"partitions\" : { \"src\" : { \"path\" : \"src\" , \"target\" : \"ReplicatedStorage.Project\" } } } Warning Make sure that the src directory exists in your project, or Rojo will throw an error! Warning Any objects contained in the target of a partition will be destroyed by Rojo if not found on the filesystem! A Rojo project has one or more partitions . Partitions define how code should be transferred between the filesystem and Roblox by mapping directories and files to Roblox objects. Each partition has: A name (the key in the partitions object), which is used for debugging path , the location on the filesystem relative to rojo.json target , the location in Roblox relative to game","title":"New Project"},{"location":"getting-started/creating-a-project/#syncing-into-studio","text":"Once you've added your partition to the project file, you can start the Rojo dev server by running a command in your project's directory: rojo serve If your project is in the right place, Rojo will let you know that it was found and start an HTTP server that the plugin can connect to. In Roblox Studio, open the plugins tab and find Rojo's buttons. Press Test Connection to verify that the plugin can communicate with the dev server. Watch the Output panel for the results. Info If you see an error message, return to the previous steps and make sure that the Rojo dev server is running. After your connection was successful, press Sync In to move code from the filesystem into Studio, or use Toggle Polling to have Rojo automatically sync in changes as they happen.","title":"Syncing into Studio"},{"location":"getting-started/creating-a-project/#importing-an-existing-project","text":"Rojo will eventually support importing an existing Roblox project onto the filesystem for use with Rojo. Rojo doesn't currently support converting an existing project or syncing files from Roblox Studio onto the filesystem. In the mean time, you can manually copy your files into the structure that Rojo expects. Up-to-date information will be available on issue #5 as this is worked on.","title":"Importing an Existing Project"},{"location":"getting-started/installation/","text":"Installation \u00b6 Rojo has two components: The server, a binary written in Rust The plugin, a Roblox Studio plugin written in Lua It's important that the plugin and server are compatible. The plugin will show errors in the Roblox Studio Output window if there is a version mismatch. Installing the Server \u00b6 To install the server, either: If you have Rust installed, use cargo install rojo Or, download a pre-built Windows binary from the GitHub releases page The Rojo binary must be run from the command line, like Terminal on MacOS or cmd.exe on Windows. It's recommended that you put the Rojo binary on your PATH to make this easier. Installing the Plugin \u00b6 To install the plugin, either: Install the plugin from the Roblox plugin page . This gives you less control over what version you install -- you will always have the latest version. Or, download the latest release from the GitHub releases section and install it into your Roblox plugins folder You can open this folder by clicking the \"Plugins Folder\" button from the Plugins toolbar in Roblox Studio Visual Studio Code Extension \u00b6 If you use Visual Studio Code on Windows, you can install Evaera's unofficial Rojo extension , which will install both halves of Rojo for you. It even has a nifty UI to add partitions and start/stop the Rojo server!","title":"Installation"},{"location":"getting-started/installation/#installation","text":"Rojo has two components: The server, a binary written in Rust The plugin, a Roblox Studio plugin written in Lua It's important that the plugin and server are compatible. The plugin will show errors in the Roblox Studio Output window if there is a version mismatch.","title":"Installation"},{"location":"getting-started/installation/#installing-the-server","text":"To install the server, either: If you have Rust installed, use cargo install rojo Or, download a pre-built Windows binary from the GitHub releases page The Rojo binary must be run from the command line, like Terminal on MacOS or cmd.exe on Windows. It's recommended that you put the Rojo binary on your PATH to make this easier.","title":"Installing the Server"},{"location":"getting-started/installation/#installing-the-plugin","text":"To install the plugin, either: Install the plugin from the Roblox plugin page . This gives you less control over what version you install -- you will always have the latest version. Or, download the latest release from the GitHub releases section and install it into your Roblox plugins folder You can open this folder by clicking the \"Plugins Folder\" button from the Plugins toolbar in Roblox Studio","title":"Installing the Plugin"},{"location":"getting-started/installation/#visual-studio-code-extension","text":"If you use Visual Studio Code on Windows, you can install Evaera's unofficial Rojo extension , which will install both halves of Rojo for you. It even has a nifty UI to add partitions and start/stop the Rojo server!","title":"Visual Studio Code Extension"}]}