{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is the documentation home for Rojo. Available versions of these docs: 0.5.x 0.4.x master branch Rojo is a flexible multi-tool designed for creating robust Roblox projects. This documentation is a continual work in progress. If you find any issues, please file an issue on Rojo's issue tracker !","title":"Home"},{"location":"migrating-to-epiphany/","text":"Rojo underwent a large refactor during most of 2018 to enable a bunch of new features and lay groundwork for lots more in 2019. As such, Rojo 0.5.x projects are not compatible with Rojo 0.4.x projects. Supporting Both 0.4.x and 0.5.x \u00b6 Rojo 0.5.x uses a different name for its project format. While 0.4.x used rojo.json , 0.5.x uses roblox-project.json , which allows them to coexist. If you aren't sure about upgrading or want to upgrade gradually, it's possible to keep both files in the same project without causing problems. Upgrading Your Project File \u00b6 Project files in 0.5.x are more explicit and flexible than they were in 0.4.x. Project files can now describe models and plugins in addition to places. This new project file format also guards against two of the biggest pitfalls when writing a config file: Using a service as a partition target directly, which often wiped away extra instances Defining two partitions that overlapped, which made Rojo act unpredictably The biggest change is that the partitions field has been replaced with a new field, tree , that describes the entire hierarchy of your project from the top-down. A project for 0.4.x that syncs from the src directory into ReplicatedStorage.Source would look like this: { \"name\" : \"Rojo 0.4.x Example\" , \"partitions\" : { \"path\" : \"src\" , \"target\" : \"ReplicatedStorage.Source\" } } In 0.5.x, the project format is more explicit: { \"name\" : \"Rojo 0.5.x Example\" , \"tree\" : { \"$className\" : \"DataModel\" , \"ReplicatedStorage\" : { \"$className\" : \"ReplicatedStorage\" , \"Source\" : { \"$path\" : \"src\" } } } } For each object in the tree, we define metadata and children . Metadata begins with a dollar sign ( $ ), like $className . This is so that children and metadata can coexist without creating too many nested layers. All other values are considered children, where the key is the instance's name, and the value is an object, repeating the process. Migrating .model.json Files \u00b6 No upgrade path yet, stay tuned. Migrating Unknown Files \u00b6 If you used Rojo to sync in files as StringValue objects, you'll need to make sure those files end with the txt extension to preserve this in Rojo 0.5.x. Unknown files are now ignored in Rojo instead of being converted to StringValue objects.","title":"Migrating from 0.4.x to 0.5.x"},{"location":"migrating-to-epiphany/#supporting-both-04x-and-05x","text":"Rojo 0.5.x uses a different name for its project format. While 0.4.x used rojo.json , 0.5.x uses roblox-project.json , which allows them to coexist. If you aren't sure about upgrading or want to upgrade gradually, it's possible to keep both files in the same project without causing problems.","title":"Supporting Both 0.4.x and 0.5.x"},{"location":"migrating-to-epiphany/#upgrading-your-project-file","text":"Project files in 0.5.x are more explicit and flexible than they were in 0.4.x. Project files can now describe models and plugins in addition to places. This new project file format also guards against two of the biggest pitfalls when writing a config file: Using a service as a partition target directly, which often wiped away extra instances Defining two partitions that overlapped, which made Rojo act unpredictably The biggest change is that the partitions field has been replaced with a new field, tree , that describes the entire hierarchy of your project from the top-down. A project for 0.4.x that syncs from the src directory into ReplicatedStorage.Source would look like this: { \"name\" : \"Rojo 0.4.x Example\" , \"partitions\" : { \"path\" : \"src\" , \"target\" : \"ReplicatedStorage.Source\" } } In 0.5.x, the project format is more explicit: { \"name\" : \"Rojo 0.5.x Example\" , \"tree\" : { \"$className\" : \"DataModel\" , \"ReplicatedStorage\" : { \"$className\" : \"ReplicatedStorage\" , \"Source\" : { \"$path\" : \"src\" } } } } For each object in the tree, we define metadata and children . Metadata begins with a dollar sign ( $ ), like $className . This is so that children and metadata can coexist without creating too many nested layers. All other values are considered children, where the key is the instance's name, and the value is an object, repeating the process.","title":"Upgrading Your Project File"},{"location":"migrating-to-epiphany/#migrating-modeljson-files","text":"No upgrade path yet, stay tuned.","title":"Migrating .model.json Files"},{"location":"migrating-to-epiphany/#migrating-unknown-files","text":"If you used Rojo to sync in files as StringValue objects, you'll need to make sure those files end with the txt extension to preserve this in Rojo 0.5.x. Unknown files are now ignored in Rojo instead of being converted to StringValue objects.","title":"Migrating Unknown Files"},{"location":"sync-details/","text":"This page aims to describe how Rojo turns files on the filesystem into Roblox objects. Overview \u00b6 File Name Instance Type any directory Folder *.server.lua Script *.client.lua LocalScript *.lua ModuleScript *.csv LocalizationTable *.txt StringValue Folders \u00b6 Any directory on the filesystem will turn into a Folder instance unless it contains an 'init' script, described below. Scripts \u00b6 The default script type in Rojo projects is ModuleScript , since most scripts in well-structued Roblox projects will be modules. If a directory contains a file named init.server.lua , init.client.lua , or init.lua , that folder will be transformed into a *Script instance with the contents of the 'init' file. This can be used to create scripts inside of scripts. For example, these files: my-game init.client.lua foo.lua Will turn into these instances in Roblox: Localization Tables \u00b6 Any CSV files are transformed into LocalizationTable instances. Rojo expects these files to follow the same format that Roblox does when importing and exporting localization information. Plain Text Files \u00b6 Plain text files ( .txt ) files are transformed into StringValue instances. This is useful for bringing in text data that can be read by scripts at runtime.","title":"Sync Details"},{"location":"sync-details/#overview","text":"File Name Instance Type any directory Folder *.server.lua Script *.client.lua LocalScript *.lua ModuleScript *.csv LocalizationTable *.txt StringValue","title":"Overview"},{"location":"sync-details/#folders","text":"Any directory on the filesystem will turn into a Folder instance unless it contains an 'init' script, described below.","title":"Folders"},{"location":"sync-details/#scripts","text":"The default script type in Rojo projects is ModuleScript , since most scripts in well-structued Roblox projects will be modules. If a directory contains a file named init.server.lua , init.client.lua , or init.lua , that folder will be transformed into a *Script instance with the contents of the 'init' file. This can be used to create scripts inside of scripts. For example, these files: my-game init.client.lua foo.lua Will turn into these instances in Roblox:","title":"Scripts"},{"location":"sync-details/#localization-tables","text":"Any CSV files are transformed into LocalizationTable instances. Rojo expects these files to follow the same format that Roblox does when importing and exporting localization information.","title":"Localization Tables"},{"location":"sync-details/#plain-text-files","text":"Plain text files ( .txt ) files are transformed into StringValue instances. This is useful for bringing in text data that can be read by scripts at runtime.","title":"Plain Text Files"},{"location":"why-rojo/","text":"There are a number of existing plugins for Roblox that move code from the filesystem into Roblox. Besides Rojo, there is: Studio Bridge by Vocksel RbxRefresh by Osyris RbxSync by evaera CodeSync and rbx-exteditor by MemoryPenguin rbxmk by Anaminus So why did I build Rojo? Each of these tools solves what is essentially the same problem from a few different angles. The goal of Rojo is to take all of the lessons and ideas learned from these projects and build a tool that can solve the problem for good. Additionally: I think that this tool needs to be built in a compiled language without a runtime, for easy distribution and good performance. I think that the conventions promoted by other sync plugins ( .module.lua for modules, as well a single sync point) are sub-optimal. I think that I have a good enough understanding of the problem to build something robust. I think that Rojo should be able to do more than just sync code.","title":"Why Rojo?"},{"location":"getting-started/creating-a-place/","text":"To use Rojo to build a place, you'll need to create a new project file, which tells Rojo how your project is structured on-disk and in Roblox. Create a new folder, then run rojo init inside that folder to initialize an empty project. mkdir my-new-project cd my-new-project rojo init Rojo will make a small project file in your directory, named roblox-project.json . It'll make sure that any code in the directory src will get put into ReplicatedStorage.Source . Speaking of, let's make sure we create a directory named src , and maybe a Lua file inside of it: mkdir src echo 'print(\"Hello, world!\")' > src/hello.lua Building Your Place \u00b6 Now that we have a project, one thing we can do is build a Roblox place file for our project. This is a great way to get started with a project quickly with no fuss. All we have to do is call rojo build : rojo build -o MyNewProject.rbxl If you open MyNewProject.rbxl in Roblox Studio now, you should see a Folder containing a ModuleScript under ReplicatedStorage ! Info To generate an XML place file instead, like if you're checking the place file into version control, just use rbxlx as the extension on the output file instead. Live-Syncing into Studio \u00b6 Building a place file is great for the initial build, but for actively working on your place, you'll want something quicker. In Roblox Studio, make sure the Rojo plugin is installed. If you need it, check out the installation guide to learn how to install it. To expose your project to the plugin, you'll need to serve it from the command line: rojo serve This will start up a web server that tells Roblox Studio what instances are in your project and sends notifications if any of them change. Note the port number, then switch into Roblox Studio and press the Rojo Connect button in the plugins tab. Type in the port number, if necessary, and press Start . If everything went well, you should now be able to change files in the src directory and watch them sync into Roblox Studio in real time! Uploading Your Place \u00b6 Aimed at teams that want serious levels of automation, Rojo can upload places to Roblox.com automatically. You'll need an existing place on Roblox.com as well as the .ROBLOSECURITY cookie of an account that has write access to that place. Warning It's recommended that you set up a Roblox account dedicated to deploying your place instead of your personal account in case your security cookie is compromised. Generating and uploading your place file is as simple as: rojo upload --asset_id [ PLACE ID ] --cookie \"[SECURITY COOKIE]\"","title":"Creating a Place with Rojo"},{"location":"getting-started/creating-a-place/#building-your-place","text":"Now that we have a project, one thing we can do is build a Roblox place file for our project. This is a great way to get started with a project quickly with no fuss. All we have to do is call rojo build : rojo build -o MyNewProject.rbxl If you open MyNewProject.rbxl in Roblox Studio now, you should see a Folder containing a ModuleScript under ReplicatedStorage ! Info To generate an XML place file instead, like if you're checking the place file into version control, just use rbxlx as the extension on the output file instead.","title":"Building Your Place"},{"location":"getting-started/creating-a-place/#live-syncing-into-studio","text":"Building a place file is great for the initial build, but for actively working on your place, you'll want something quicker. In Roblox Studio, make sure the Rojo plugin is installed. If you need it, check out the installation guide to learn how to install it. To expose your project to the plugin, you'll need to serve it from the command line: rojo serve This will start up a web server that tells Roblox Studio what instances are in your project and sends notifications if any of them change. Note the port number, then switch into Roblox Studio and press the Rojo Connect button in the plugins tab. Type in the port number, if necessary, and press Start . If everything went well, you should now be able to change files in the src directory and watch them sync into Roblox Studio in real time!","title":"Live-Syncing into Studio"},{"location":"getting-started/creating-a-place/#uploading-your-place","text":"Aimed at teams that want serious levels of automation, Rojo can upload places to Roblox.com automatically. You'll need an existing place on Roblox.com as well as the .ROBLOSECURITY cookie of an account that has write access to that place. Warning It's recommended that you set up a Roblox account dedicated to deploying your place instead of your personal account in case your security cookie is compromised. Generating and uploading your place file is as simple as: rojo upload --asset_id [ PLACE ID ] --cookie \"[SECURITY COOKIE]\"","title":"Uploading Your Place"},{"location":"getting-started/installation/","text":"Rojo has two components: The server, a binary written in Rust The plugin, a Roblox Studio plugin written in Lua It's important that the plugin and server are compatible. The plugin will show errors in the Roblox Studio Output window if there is a version mismatch. Installing the Server \u00b6 To install the server, either: If you have Rust installed, use cargo install rojo Or, download a pre-built Windows binary from the GitHub releases page The Rojo binary must be run from the command line, like Terminal on MacOS or cmd.exe on Windows. It's recommended that you put the Rojo binary on your PATH to make this easier. Installing the Plugin \u00b6 To install the plugin, either: Install the plugin from the Roblox plugin page . This gives you less control over what version you install -- you will always have the latest version. Or, download the latest release from the GitHub releases section and install it into your Roblox plugins folder You can open this folder by clicking the \"Plugins Folder\" button from the Plugins toolbar in Roblox Studio Visual Studio Code Extension \u00b6 If you use Visual Studio Code on Windows, you can install Evaera's unofficial Rojo extension , which will install both halves of Rojo for you. It even has a nifty UI to add partitions and start/stop the Rojo server!","title":"Installation"},{"location":"getting-started/installation/#installing-the-server","text":"To install the server, either: If you have Rust installed, use cargo install rojo Or, download a pre-built Windows binary from the GitHub releases page The Rojo binary must be run from the command line, like Terminal on MacOS or cmd.exe on Windows. It's recommended that you put the Rojo binary on your PATH to make this easier.","title":"Installing the Server"},{"location":"getting-started/installation/#installing-the-plugin","text":"To install the plugin, either: Install the plugin from the Roblox plugin page . This gives you less control over what version you install -- you will always have the latest version. Or, download the latest release from the GitHub releases section and install it into your Roblox plugins folder You can open this folder by clicking the \"Plugins Folder\" button from the Plugins toolbar in Roblox Studio","title":"Installing the Plugin"},{"location":"getting-started/installation/#visual-studio-code-extension","text":"If you use Visual Studio Code on Windows, you can install Evaera's unofficial Rojo extension , which will install both halves of Rojo for you. It even has a nifty UI to add partitions and start/stop the Rojo server!","title":"Visual Studio Code Extension"}]}